using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using KantoorApplicatie.Models;
using KantoorApplicatie.Models.Invoice;
using KantoorApplicatie.Models.Theme;
using KantoorApplicatie.Properties;
using KantoorApplicatie.Models.Floor;
using System.Windows.Forms;

namespace KantoorApplicatie.Db
{
    public static class DatabaseController
    {

        public static List<Product> productList = GetProducts();
        public static List<Theme> themeList = GetThemes();
        public static List<SubTheme> subThemeList = GetSubThemes();
        public static List<FloorMaterial> floorMaterialList = GetFloorMaterial();
        public static List<FloorType> floorTypeList = GetFloorType();
        public static List<Representative> representativeList = GetRepresentatives();
        public static List<Customer> customerList = GetCustomers();
        public static List<InvoiceData> invoiceList = GetInvoiceData();

        ///  Everything with products.
        // Adds products into the product table inside the database.
        public static void AddProducts(Product p)
        {
            using (var mc = new MyContext())
            {
                mc.products.Add(p);
                mc.SaveChanges();
            }
            productList = GetProducts();
        }

        // Adds orderedproduct to database.
        public static void AddOrderedProduct(OrderedProduct op)
        {
            using (var mc = new MyContext())
            {
                mc.orderedProducts.Add(op);
                mc.SaveChanges();
            }
        }


        // Adds customer to database.
        public static void AddCustomer(Customer customer)
        {

            using (var mc = new MyContext())
            {
                mc.customers.Add(customer);
                mc.SaveChanges();
            }
            customerList = GetCustomers();
        }

        // Adds room to database.
        public static void AddRoom(Room room)
        {
            using (var mc = new MyContext())
            {
                FloorType floorType = (from r in mc.floorType
                                       where r.floorTypeId == room.floorType.floorTypeId
                                       select r).Single();
                Room newRoom = new Room(room.width, room.height, room.shape, floorType);
                mc.rooms.Add(newRoom);
                mc.SaveChanges();
            }
        }

        // Adds invoice data to database.
        public static void AddInvoice(InvoiceData invoiceData)
        {
            using (var mc = new MyContext())
            {
                var invoice = new InvoiceData
                {
                    customer = (from c in mc.customers
                                where c.companyName.Equals(invoiceData.customer.companyName)
                                && c.department.Equals(invoiceData.customer.department)
                                && c.name.Equals(invoiceData.customer.name)
                                select c).Single(),
                    representative = (from r in mc.representatives
                                      where r.RepresentativeId == invoiceData.representative.RepresentativeId
                                      select r).Single(),
                    room = mc.rooms.OrderByDescending(r => r.roomId).First(),
                    invoiceDate = invoiceData.invoiceDate
                };
                mc.invoices.Add(invoice);
                mc.SaveChanges();
            }
            invoiceList = GetInvoiceData();
            Console.WriteLine("added invoice");
        }
        // Returns all products inside the database.
        public static List<Product> GetProducts()
        {
            List<Product> pc;
            using (var mc = new MyContext())
            {
                pc = (from s in mc.products
                      select s).ToList<Product>();
            }
            return pc;
        }

        /// Everything with theme's.
        // Add theme's.
        public static void AddTheme(Theme t)
        {
            using (var mc = new MyContext())
            {
                mc.themes.Add(t);
                mc.SaveChanges();
            }
            themeList = GetThemes();
        }
        // Add subTheme's
        public static void AddSubTheme(SubTheme st)
        {
            using (var mc = new MyContext())
            {
                var subTheme = new SubTheme
                {
                    name = st.name,
                    subThemeId = st.subThemeId,
                    image = st.image,
                    lastUsed = 0,
                    theme = st.theme

                };
                mc.subThemes.Add(subTheme);
                mc.SaveChanges();
            }
            subThemeList = GetSubThemes();
        }

        // Deletes subTheme
        public static void DeleteSubTheme(SubTheme st)
        {
            using (var mc = new MyContext())
            {
                // Finds selected subtheme
                var subtheme = from sT in mc.subThemes
                               where sT.subThemeId == st.subThemeId
                               select sT;
                // Removes selected subtheme
                mc.subThemes.Remove(subtheme.First());
                // Check
                Console.WriteLine("Removed: " + subtheme.First());
                mc.SaveChanges();
            }
            subThemeList = GetSubThemes();
        }

        // Get themes
        public static List<Theme> GetThemes()
        {
            List<Theme> pc;
            using (var mc = new MyContext())
            {
                pc = mc.themes.ToList();
            }
            return pc;
        }
        // Get all subthemes
        public static List<SubTheme> GetSubThemes()
        {
            List<SubTheme> pc;
            using (var mc = new MyContext())
            {
                pc = mc.subThemes.Include("Theme").ToList();
            }
            return pc;
        }
        // If there are no theme's add them.
        public static void AddThemesForTheFirstRun()
        {
            using (var mc = new MyContext())
            {
                List<Theme> pc = (from s in mc.themes
                                  select s).ToList<Theme>();
                if (pc.Count == 0)
                {
                    List<Theme> Themes = new List<Theme>
                    {
                        new Theme("School"),
                        new Theme("Medisch"),
                        new Theme("Factory"),
                        new Theme("ICT"),
                        new Theme("Afbeeldingen")
                    };
                    List<SubTheme> subThemes = new List<SubTheme>
                    {
                        new SubTheme("School1", Resources.Background_School1, Themes[0]),
                        new SubTheme("School2", Resources.Background_School2, Themes[0]),
                        new SubTheme("Medical1", Resources.Background_Medical1, Themes[1]),
                        new SubTheme("Medical2", Resources.Background_Office, Themes[1]),
                        new SubTheme("Factory1", Resources.Background_Metal1, Themes[2]),
                        new SubTheme("Factory2", Resources.Background_Metal2, Themes[2]),
                        new SubTheme("ICT1", Resources.Background_ICT, Themes[3])
                    };

                    foreach (Theme t in Themes)
                    {
                        mc.themes.Add(t);
                    }
                    foreach (SubTheme t in subThemes)
                    {
                        mc.subThemes.Add(t);
                    }
                    mc.SaveChanges();
                }
            }
            themeList = GetThemes();
            subThemeList = GetSubThemes();
        }
        /// Everything with floors
        // Add Floors if there are no floors in the database
        public static void AddFloorsForFirstRun()
        {
            FloorMaterial wood = new FloorMaterial("Hout");
            FloorType woodType = new FloorType("Random houtsoort", (float)19.95, Resources.WoodFloor);
            FloorType woodType2 = new FloorType("Dezelfde houtsoort", (float)19.95, Resources.parket);
            FloorType woodType3 = new FloorType("Nieuwe houtsoort", (float)19.95, Resources.SmallerPlank);
            FloorType woodType4 = new FloorType("Meer nieuwe houtsoorten", (float)19.95, Resources.DarkerPlank);

            woodType.floorMaterial = wood;
            woodType2.floorMaterial = wood;
            woodType3.floorMaterial = wood;
            woodType4.floorMaterial = wood;
            FloorMaterial wood2 = new FloorMaterial("Steen");


            using (var mc = new MyContext())
            {
                List<FloorMaterial> pc = (from s in mc.floorMaterial
                                          select s).ToList<FloorMaterial>();
                if (pc.Count == 0)
                {

                    mc.floorMaterial.Add(wood);
                    mc.floorMaterial.Add(wood2);

                    mc.floorType.Add(woodType);
                    mc.floorType.Add(woodType2);
                    mc.floorType.Add(woodType3);
                    mc.floorType.Add(woodType4);
                    mc.SaveChanges();
                }
            }
            floorMaterialList = GetFloorMaterial();
            floorTypeList = GetFloorType();
        }

        // Clears the last used subtheme
        public static void clearLastUsed()
        {
            using (var mc = new MyContext())
            {
                var subTheme = (from s in mc.subThemes
                                where s.lastUsed != 0
                                select s).ToArray();
                foreach (var st in subTheme)
                {
                    st.lastUsed = 0;
                    mc.SaveChanges();
                }
            }
        }

        // Sets the last used subtheme
        public static void setLastUsed(SubTheme st)
        {
            using (var mc = new MyContext())
            {
                clearLastUsed();
                var subTheme = (from s in mc.subThemes
                                where s.subThemeId == st.subThemeId
                                select s).Single();
                subTheme.lastUsed = 1;
                mc.SaveChanges();
            }
        }

        // Get last theme
        public static SubTheme getLastSubTheme()
        {
            List<SubTheme> st;
            using (var mc = new MyContext())
            {
                st = mc.subThemes.Include("Theme").Where(v => v.lastUsed == 1).ToList();
            }

            if (st.Count > 0)
            {
                SubTheme Subtheme = st.First();
                return Subtheme;
            }
            return null;
        }

        // Get floor material
        public static List<FloorMaterial> GetFloorMaterial()
        {
            List<FloorMaterial> pc;
            using (var mc = new MyContext())
            {
                pc = mc.floorMaterial.ToList<FloorMaterial>();
            }
            return pc;
        }
        // Get floor type
        public static List<FloorType> GetFloorType()
        {
            List<FloorType> pc;
            using (var mc = new MyContext())
            {
                pc = mc.floorType.Include("FloorMaterial").ToList(); 
            }
            return pc;
        }

        // Get customers
        public static List<Customer> GetCustomers()
        {
            List<Customer> c;
            using (var mc = new MyContext())
            {
                c = mc.customers.ToList();
            }
            return c;
        }

        // Get representatives
        public static List<Representative> GetRepresentatives()
        {
            List<Representative> r;
            using (var mc = new MyContext())
            {
                r = mc.representatives.ToList();
            }
            return r;
        }

        // Get invoicedata
        public static List<InvoiceData> GetInvoiceData()
        {
            List<InvoiceData> id;
            using (var mc = new MyContext())
            {
                id = mc.invoices.Include("Room").Include("Representative").Include("Customer").ToList();
            }
            return id;
        }

        // Changes a product's active property.        
        public static void SetProductActiveProperty(Product productToChange, bool b)
        {
            using (var mc = new MyContext())
            {                var product = mc.products.SingleOrDefault(p => p.productId == productToChange.productId);
                if (product != null)
                {

                    product.active = b;
                    mc.SaveChanges();
                }
            }
            productList = GetProducts();
        }
        // Save lines to database when you drew your own room.
        public static void AddLinesToDatabase(Room r, List<Line> lines)
        {
            using (var mc = new MyContext())
            {
                mc.rooms.Add(r);
                foreach (Line l in lines)
                {
                    l.room = r;
                    mc.lines.Add(l);
                }
                mc.SaveChanges();
            }
        }
    }
}

